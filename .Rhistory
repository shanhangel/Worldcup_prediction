svd1 <- svd(train_data[,c(3,4,6,7,10,11,13,14)])
plot(svd1$d, xlab = "Column", ylab = "Singular value", pch = 19)
fit_LR <- glm(Result ~ Won_Home + Draw_Home + Goals_For_Home
+ Goals_Against_Home + Won_Away + Draw_Away
+ Goals_For_Away + Goals_Against_Away, data=train_data,
family= "binomial")
prediction_LR <- predict(fit_LR, test)
prediction_LR[prediction_LR<0.5] <- 0
prediction_LR[prediction_LR>=0.5] <- 1
summary(fit_LR)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(rpart)
fit_DT <- rpart(Result ~ Won_Home + Draw_Home + Goals_For_Home
+ Goals_Against_Home + Won_Away + Draw_Away
+ Goals_For_Away + Goals_Against_Away, data=train_data,
method="class")
prediction_DT <- predict(fit_DT, test, type="class")
fancyRpartPlot(fit_DT)
summary(fit_DT)
library(randomForest)
fit_RF <- randomForest(Result ~ Won_Home + Draw_Home + Goals_For_Home
+ Goals_Against_Home + Won_Away + Draw_Away
+ Goals_For_Away + Goals_Against_Away, data=train_data,
importance=TRUE, ntree=100)
prediction_RF <- predict(fit_RF, test)
summary(fit_RF)
model_check <- data.frame(test$Result, prediction_LR, prediction_DT, prediction_RF)
kable(model_check, format = "markdown")
Url_2014 <- "http://www.fifa.com/worldcup/groups/index.html"
web_2014 <- htmlTreeParse(Url_2014, useInternal=TRUE)
team <- xpathSApply(web_2014, "//span[@class='t-nText']", xmlValue)
index <- seq(1,64,by=2)
team_1 <- team[index]
played <- xpathSApply(web_2014, "//td[@class='tbl-matchplayed']", xmlValue)
win <- xpathSApply(web_2014, "//td[@class='tbl-win']", xmlValue)
draw <- xpathSApply(web_2014, "//td[@class='tbl-draw']", xmlValue)
lost <- xpathSApply(web_2014, "//td[@class='tbl-lost']", xmlValue)
goal_for <- xpathSApply(web_2014, "//td[@class='tbl-goalfor']", xmlValue)
goal_against <- xpathSApply(web_2014, "//td[@class='tbl-goalagainst']", xmlValue)
score <- xpathSApply(web_2014, "//td[@class='tbl-pts']", xmlValue)
group_2014 <- data.frame(Team=team_1, Win=win, Draw=draw,
Goal_for=goal_for, Goal_against=goal_against)
round_2_1 <- data.frame(Home=group_2014$Team[c(1,9,17,25,5,13,21,29)],
Away=group_2014$Team[c(6,14,22,30,2,10,18,26)],
Result=NA)
round_2_2 <- merge(round_2_1, group_2014, by.x="Home", by.y="Team", sort=FALSE)
round_2 <- merge(round_2_2, group_2014, by.x="Away", by.y="Team", sort=FALSE)
final_8 <- data.frame(Home=as.character(round_2[,2]),
Away=as.character(round_2[,1]), Result=round_2[,3],
Won_Home=as.numeric(as.character(round_2[,4])),
Draw_Home=as.numeric(as.character(round_2[,5])),
Goals_For_Home=as.numeric(as.character(round_2[,6])),
Goals_Against_Home=as.numeric(as.character(round_2[,7])),
Won_Away=as.numeric(as.character(round_2[,8])),
Draw_Away=as.numeric(as.character(round_2[,9])),
Goals_For_Away=as.numeric(as.character(round_2[,10])),
Goals_Against_Away=as.numeric(as.character(round_2[,11])))
prediction_final_8 <- predict(fit_LR, final_8)
prediction_final_8[prediction_final_8<0.5] <- 0
prediction_final_8[prediction_final_8>=0.5] <- 1
final_8[,"Result"] <- as.factor(prediction_final_8)
## 根据胜负结果判定哪些队伍进入4强赛，根据淘汰赛规则A1和B2的胜者对抗C1和D2的胜者
index_1 <- NA
for (i in 1:8){
if (final_8$Result[i]==1){
index_1[i]=1
}
else if (final_8$Result[i]==0){
index_1[i]=2
}
}
Home <- c(as.character(final_8[1,index_1[1]]),
as.character(final_8[3,index_1[3]]),
as.character(final_8[5,index_1[5]]),
as.character(final_8[7,index_1[7]]))
Away <- c(as.character(final_8[2,index_1[2]]),
as.character(final_8[4,index_1[4]]),
as.character(final_8[6,index_1[6]]),
as.character(final_8[8,index_1[8]]))
round_3_1 <- data.frame(Home=Home, Away=Away, Result=NA)
round_3_2 <- merge(round_3_1, group_2014, by.x="Home", by.y="Team", sort=FALSE)
round_3 <- merge(round_3_2, group_2014, by.x="Away", by.y="Team", sort=FALSE)
final_4 <- data.frame(Home=as.character(round_3[,2]),
Away=as.character(round_3[,1]), Result=round_3[,3],
Won_Home=as.numeric(as.character(round_3[,4])),
Draw_Home=as.numeric(as.character(round_3[,5])),
Goals_For_Home=as.numeric(as.character(round_3[,6])),
Goals_Against_Home=as.numeric(as.character(round_3[,7])),
Won_Away=as.numeric(as.character(round_3[,8])),
Draw_Away=as.numeric(as.character(round_3[,9])),
Goals_For_Away=as.numeric(as.character(round_3[,10])),
Goals_Against_Away=as.numeric(as.character(round_3[,11])))
prediction_final_4 <- predict(fit_LR, final_4)
prediction_final_4[prediction_final_4<0.5] <- 0
prediction_final_4[prediction_final_4>=0.5] <- 1
final_4[,"Result"] <- as.factor(prediction_final_4)
## 同理，用上面的方法计算半决赛结果
index_2 <- NA
for (i in 1:4){
if (final_4$Result[i]==1){
index_2[i]=1
}
else if (final_4$Result[i]==0){
index_2[i]=2
}
}
Home <- c(as.character(final_4[1,index_2[1]]),
as.character(final_4[3,index_2[3]]))
Away <- c(as.character(final_4[2,index_2[2]]),
as.character(final_4[4,index_2[4]]))
round_4_1 <- data.frame(Home=Home, Away=Away, Result=NA)
round_4_2 <- merge(round_4_1, group_2014, by.x="Home", by.y="Team", sort=FALSE)
round_4 <- merge(round_4_2, group_2014, by.x="Away", by.y="Team", sort=FALSE)
semi_final <- data.frame(Home=as.character(round_4[,2]),
Away=as.character(round_4[,1]), Result=round_3[,3],
Won_Home=as.numeric(as.character(round_4[,4])),
Draw_Home=as.numeric(as.character(round_4[,5])),
Goals_For_Home=as.numeric(as.character(round_4[,6])),
Goals_Against_Home=as.numeric(as.character(round_4[,7])),
Won_Away=as.numeric(as.character(round_4[,8])),
Draw_Away=as.numeric(as.character(round_4[,9])),
Goals_For_Away=as.numeric(as.character(round_4[,10])),
Goals_Against_Away=as.numeric(as.character(round_4[,11])))
prediction_final_2 <- predict(fit_LR, semi_final)
prediction_final_2[prediction_final_2<0.5] <- 0
prediction_final_2[prediction_final_2>=0.5] <- 1
semi_final[,"Result"] <- as.factor(prediction_final_2)
index_3 <- NA
for (i in 1:2){
if (semi_final$Result[i]==1){
index_3[i]=1
}
else if (semi_final$Result[i]==0){
index_3[i]=2
}
}
Home <- as.character(semi_final[1,index_3[1]])
Away <- as.character(semi_final[2,index_3[2]])
round_5_1 <- data.frame(Home=Home, Away=Away, Result=NA)
round_5_2 <- merge(round_5_1, group_2014, by.x="Home", by.y="Team", sort=FALSE)
round_5 <- merge(round_5_2, group_2014, by.x="Away", by.y="Team", sort=FALSE)
final <- data.frame(Home=as.character(round_5[,2]),
Away=as.character(round_5[,1]), Result=round_3[,3],
Won_Home=as.numeric(as.character(round_5[,4])),
Draw_Home=as.numeric(as.character(round_5[,5])),
Goals_For_Home=as.numeric(as.character(round_5[,6])),
Goals_Against_Home=as.numeric(as.character(round_5[,7])),
Won_Away=as.numeric(as.character(round_5[,8])),
Draw_Away=as.numeric(as.character(round_5[,9])),
Goals_For_Away=as.numeric(as.character(round_5[,10])),
Goals_Against_Away=as.numeric(as.character(round_5[,11])))
prediction_final_1 <- predict(fit_LR, final)
prediction_final_1[prediction_final_1<0.5] <- 0
prediction_final_1[prediction_final_1>=0.5] <- 1
final[,"Result"] <- as.factor(prediction_final_1)
Round_of_16 <- as.character(group_2014$Team[c(1,6,9,14,17,22,25,30,5,2,13,10,21,18,29,26)])
Quarter_Final <- c(as.character(final_8[1,index_1[1]]),
as.character(final_8[2,index_1[2]]),
as.character(final_8[3,index_1[3]]),
as.character(final_8[4,index_1[4]]),
as.character(final_8[5,index_1[5]]),
as.character(final_8[6,index_1[6]]),
as.character(final_8[7,index_1[7]]),
as.character(final_8[8,index_1[8]]))
Semi_Final <- c(as.character(final_4[1,index_2[1]]),
as.character(final_4[2,index_2[2]]),
as.character(final_4[3,index_2[3]]),
as.character(final_4[4,index_2[4]]))
Final <- c(as.character(semi_final[1,index_3[1]]),
as.character(semi_final[2,index_3[2]]))
if (final$Result[1]==1){
champion=final[1,1]
} else if (final$Result[1]==0){
champion=final[1,2]
}
Champion <- as.character(champion)
Round_of_16
Quarter_Final
Semi_Final
Final
Champion
`1` <- read.csv("C:/Users/huangshan/Desktop/1.csv")
View(`1`)
1
'1'
value <- read.csv("C:/Users/huangshan/Desktop/1.csv")
library(ggplot2)
pie <- ggplot(values, aes(x = "x_list" ,y = Percentage, fill = Type)) +  geom_bar(width = 3) + geom_text(aes(y = sum(val)-(val/2 + c(0, cumsum(val)[-length(val)])), label = percent), size=3)
pie <- ggplot(value, aes(x = "x_list" ,y = Percentage, fill = Type)) +  geom_bar(width = 3) + geom_text(aes(y = sum(val)-(val/2 + c(0, cumsum(val)[-length(val)])), label = percent), size=3)
pie
ggplot(value, aes(x = "", y = value, fill = variable)) +
geom_bar(width = 1) +
scale_fill_manual(values = c("red", "yellow")) +
coord_polar("y", start=pi / 3) + #<- read this line!
opts(title = "Pac man")
df <- data.frame(variable=c("中央研究实验室"， "工业部门实验室"),
value=c(3, 27))
ggplot(df, aes(x = "", y = value, fill = variable)) +
geom_bar(width = 1) +
scale_fill_manual(values = c("red", "yellow")) +
coord_polar("y", start=pi / 3) + #<- read this line!
opts(title = "Pac man")
class(value)
df <- data.frame(variable=c("中央研究实验室", "工业部门实验室"),
value=c(3, 27))
ggplot(df, aes(x = "", y = value, fill = variable)) +
geom_bar(width = 1) +
scale_fill_manual(values = c("red", "yellow")) +
coord_polar("y", start=pi / 3) + #<- read this line!
opts(title = "Pac man")
score_2010 <- xpathSApply(web_2010, "//td[@class='c']", xmlValue)
team_name <- xpathSApply(web_2010, "//td[@class='l']", xmlValue)
home_team <- xpathSApply(web_2010, "//td[@class='l homeTeam']",
xmlValue)[49:64]
away_team <- xpathSApply(web_2010, "//td[@class='r awayTeam']",
xmlValue)[49:64]
##注意淘汰赛中的结果只有根据比分来判别，取第49-64场的比分数据，Node是
##<td style="width:120px" class="c ">， c后面多了一个空格
result <- xpathSApply(web_2010, "// td[@class='c ']", xmlValue)[49:64]
result1 <- as.character(result)
split <- strsplit(result1," ")
result2 <- list()
for (i in 1:16){
if (regexpr("PSO", result1[[i]])>0){
result2[i] <- split[[i]][length(split[[i]])-1]
}
else{
result2[i] <- split[[i]][1]
}
}
split1 <- strsplit(as.character(result2),":")
result3 <- list()
for (i in 1:16){
if (split1[[i]][1]>split1[[i]][2]){
result3[i]=1
}
else{
result3[i]=0
}
}
eliresult_2010 <- data.frame(home_team=home_team, away_team=away_team,
result=result,result3=as.numeric(result3))
final_result_2010 <- merge(eliresult_2010, gpresult_2010_2, by.x="home_team",
by.y="Team", sort=TRUE)
final_result_2010 <- merge(final_result_2010, gpresult_2010_2, by.x="away_team",
by.y="Team", sort=FALSE)
final_result_2010 <- data.frame(final_result_2010[,2], final_result_2010[,1],
final_result_2010[,4:18])
final_result_2010[18] <- "2010"
colnames(final_result_2010) <- c("Home", "Away", "Result", "Played_Home",
"Won_Home", "Draw_Home", "Lost_Home",
"Goals_For_Home", "Goals_Against_Home",
"Point_Home","Played_Away", "Won_Away",
"Draw_Away", "Lost_Away", "Goals_For_Away",
"Goals_Against_Away", "Point_Away", "Year")
write.csv(final_result_2010,"./test.csv")
library(knitr)
kable(final_result_2010, format = "markdown")
create_train_data <- function(Url){
web <- htmlTreeParse(Url, useInternal=TRUE)
year <- substr(Url, nchar(Url)-22, nchar(Url)-19)
if (Url%in%c(Url_2006, Url_2002, Url_1998)){
emi_index <- 49:64
}
else if (Url%in%c(Url_1994, Url_1990, Url_1986)){
emi_index <- 37:52
}
score <- xpathSApply(web, "//td[@class='c']", xmlValue)
team_name <- xpathSApply(web, "//td[@class='l']", xmlValue)
gpresult_1 <- matrix(score, ncol=7, byrow=TRUE)
gpresult_2 <- cbind(team_name, gpresult_1)
colnames(gpresult_2) <- c("Team", "Played", "Won", "Draw", "Lost",
"Goals For", "Goals Against", "Points")
home_team <- xpathSApply(web, "//td[@class='l homeTeam']",
xmlValue)[emi_index]
away_team <- xpathSApply(web, "//td[@class='r awayTeam']",
xmlValue)[emi_index]
result <- xpathSApply(web, "// td[@class='c ']", xmlValue)[emi_index]
result1 <- as.character(result)
split <- strsplit(result1," ")
result2 <- list()
for (i in 1:16){
if (regexpr("PSO", result1[[i]])>0){
result2[i] <- split[[i]][length(split[[i]])-1]
}
else{
result2[i] <- split[[i]][1]
}
}
split1 <- strsplit(as.character(result2),":")
result3 <- list()
for (i in 1:16){
if (split1[[i]][1]>split1[[i]][2]){
result3[i]=1
}
else{
result3[i]=0
}
}
eliresult <- data.frame(home_team=home_team, away_team=away_team,
result=result,result3=as.numeric(result3))
final_result <- merge(eliresult, gpresult_2, by.x="home_team",
by.y="Team", sort=TRUE)
final_result <- merge(final_result, gpresult_2, by.x="away_team",
by.y="Team", sort=FALSE)
final_result <- data.frame(final_result[,2], final_result[,1],
final_result[,4:18])
final_result[18] <- year
colnames(final_result) <- c("Home", "Away", "Result", "Played_Home",
"Won_Home", "Draw_Home", "Lost_Home",
"Goals_For_Home", "Goals_Against_Home",
"Point_Home", "Played_Away", "Won_Away",
"Draw_Away", "Lost_Away", "Goals_For_Away",
"Goals_Against_Away", "Point_Away", "Year")
filename=paste("training","_", year, sep="")
write.csv(final_result, paste(filename,".csv",
sep=""))
}
Whole_Url <- c(Url_2006, Url_2002, Url_1998, Url_1994, Url_1990, Url_1986)
for (i in 1:6){
create_train_data(Whole_Url[i])
}
training_1986 <- read.csv("./training_1986.csv")
training_1990 <- read.csv("./training_1990.csv")
training_1994 <- read.csv("./training_1994.csv")
training_1998 <- read.csv("./training_1998.csv")
training_2002 <- read.csv("./training_2002.csv")
training_2006 <- read.csv("./training_2006.csv")
training <- rbind(training_1986, training_1990, training_1994, training_1998,
training_2002, training_2006)
write.csv(training, "training.csv")
test <- read.csv("test.csv")
train_data <- data.frame(Result=as.factor(training$Result),
Played_Home=as.numeric(training$Played_Home),
Won_Home=as.numeric(training$Won_Home),
Draw_Home=as.numeric(training$Draw_Home),
Lost_Home=as.numeric(training$Lost_Home),
Goals_For_Home=as.numeric(training$Goals_For_Home),
Goals_Against_Home=as.numeric(training$Goals_Against_Home),
Point_Home=as.numeric(training$Point_Home),
Played_Away=as.numeric(training$Played_Away),
Won_Away=as.numeric(training$Won_Away),
Draw_Away=as.numeric(training$Draw_Away),
Lost_Away=as.numeric(training$Lost_Away),
Goals_For_Away=as.numeric(training$Goals_For_Away),
Goals_Against_Away=as.numeric(training$Goals_Against_Away),
Point_Away=as.numeric(training$Point_Away))
svd1 <- svd(train_data[,c(3,4,6,7,10,11,13,14)])
plot(svd1$d, xlab = "Column", ylab = "Singular value", pch = 19)
View(training_1986)
?plot
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(rpart)
fit_DT <- rpart(Result ~ Won_Home + Draw_Home + Goals_For_Home
+ Goals_Against_Home + Won_Away + Draw_Away
+ Goals_For_Away + Goals_Against_Away, data=train_data,
method="class")
prediction_DT <- predict(fit_DT, test, type="class")
fancyRpartPlot(fit_DT)
summary(fit_DT)
library(randomForest)
fit_RF <- randomForest(Result ~ Won_Home + Draw_Home + Goals_For_Home
+ Goals_Against_Home + Won_Away + Draw_Away
+ Goals_For_Away + Goals_Against_Away, data=train_data,
importance=TRUE, ntree=100)
prediction_RF <- predict(fit_RF, test)
summary(fit_RF)
model_check <- data.frame(test$Result, prediction_LR, prediction_DT, prediction_RF)
kable(model_check, format = "markdown")
Url_2014 <- "http://www.fifa.com/worldcup/groups/index.html"
web_2014 <- htmlTreeParse(Url_2014, useInternal=TRUE)
team <- xpathSApply(web_2014, "//span[@class='t-nText']", xmlValue)
index <- seq(1,64,by=2)
team_1 <- team[index]
played <- xpathSApply(web_2014, "//td[@class='tbl-matchplayed']", xmlValue)
win <- xpathSApply(web_2014, "//td[@class='tbl-win']", xmlValue)
draw <- xpathSApply(web_2014, "//td[@class='tbl-draw']", xmlValue)
lost <- xpathSApply(web_2014, "//td[@class='tbl-lost']", xmlValue)
goal_for <- xpathSApply(web_2014, "//td[@class='tbl-goalfor']", xmlValue)
goal_against <- xpathSApply(web_2014, "//td[@class='tbl-goalagainst']", xmlValue)
score <- xpathSApply(web_2014, "//td[@class='tbl-pts']", xmlValue)
group_2014 <- data.frame(Team=team_1, Win=win, Draw=draw,
Goal_for=goal_for, Goal_against=goal_against)
round_2_1 <- data.frame(Home=group_2014$Team[c(1,9,17,25,5,13,21,29)],
Away=group_2014$Team[c(6,14,22,30,2,10,18,26)],
Result=NA)
round_2_2 <- merge(round_2_1, group_2014, by.x="Home", by.y="Team", sort=FALSE)
round_2 <- merge(round_2_2, group_2014, by.x="Away", by.y="Team", sort=FALSE)
final_8 <- data.frame(Home=as.character(round_2[,2]),
Away=as.character(round_2[,1]), Result=round_2[,3],
Won_Home=as.numeric(as.character(round_2[,4])),
Draw_Home=as.numeric(as.character(round_2[,5])),
Goals_For_Home=as.numeric(as.character(round_2[,6])),
Goals_Against_Home=as.numeric(as.character(round_2[,7])),
Won_Away=as.numeric(as.character(round_2[,8])),
Draw_Away=as.numeric(as.character(round_2[,9])),
Goals_For_Away=as.numeric(as.character(round_2[,10])),
Goals_Against_Away=as.numeric(as.character(round_2[,11])))
prediction_final_8 <- predict(fit_LR, final_8)
prediction_final_8[prediction_final_8<0.5] <- 0
prediction_final_8[prediction_final_8>=0.5] <- 1
final_8[,"Result"] <- as.factor(prediction_final_8)
u <- 7921 + 5185 + 8836 + 4761
u <- u/4
s <- 8836 - 4761
x. <- (4761-u)/s
x. <- (5184-u)/s
library(kintr)
library(knitr)
setwd("worldcup_prediction")
knit2html("worldcup_prediction")
knit2html("worldcup_prediction.Rmd")
View(final_8)
Home <- c(as.character(final_8[1,1]),
as.character(final_8[3,index_1[3]]),
as.character(final_8[5,index_1[5]]),
as.character(final_8[7,1]))
Away <- c(as.character(final_8[2,index_1[2]]),
as.character(final_8[4,index_1[4]]),
as.character(final_8[6,index_1[6]]),
as.character(final_8[8,1))
round_B_1 <- data.frame(Home=Home, Away=Away, Result=NA)
round_B_2 <- merge(round_B_1, group_2014, by.x="Home", by.y="Team", sort=FALSE)
round_B <- merge(round_B_2, group_2014, by.x="Away", by.y="Team", sort=FALSE)
final_B <- data.frame(Home=as.character(round_B[,2]),
Away=as.character(round_B[,1]), Result=round_B[,3],
Won_Home=as.numeric(as.character(round_B[,4])),
Draw_Home=as.numeric(as.character(round_B[,5])),
Goals_For_Home=as.numeric(as.character(round_B[,6])),
Goals_Against_Home=as.numeric(as.character(round_B[,7])),
Won_Away=as.numeric(as.character(round_B[,8])),
Draw_Away=as.numeric(as.character(round_B[,9])),
Goals_For_Away=as.numeric(as.character(round_B[,10])),
Goals_Against_Away=as.numeric(as.character(round_B[,11])))
prediction_final_B <- predict(fit_LR, final_B)
prediction_final_B[prediction_final_B<0.5] <- 0
prediction_final_B[prediction_final_B>=0.5] <- 1
final_B[,"Result"] <- as.factor(prediction_final_B)
View(round_B)
View(final_B)
Away
Away <- c(as.character(final_8[2,index_1[2]]),
as.character(final_8[4,index_1[4]]),
as.character(final_8[6,index_1[6]]),
as.character(final_8[8,1))
Home <- c(as.character(final_8[1,1]),
as.character(final_8[3,index_1[3]]),
as.character(final_8[5,index_1[5]]),
as.character(final_8[7,1]))
Away <- c(as.character(final_8[2,index_1[2]]),
as.character(final_8[4,index_1[4]]),
as.character(final_8[6,index_1[6]]),
as.character(final_8[8,1]))
round_B_1 <- data.frame(Home=Home, Away=Away, Result=NA)
round_B_2 <- merge(round_B_1, group_2014, by.x="Home", by.y="Team", sort=FALSE)
round_B <- merge(round_B_2, group_2014, by.x="Away", by.y="Team", sort=FALSE)
final_B <- data.frame(Home=as.character(round_B[,2]),
Away=as.character(round_B[,1]), Result=round_B[,3],
Won_Home=as.numeric(as.character(round_B[,4])),
Draw_Home=as.numeric(as.character(round_B[,5])),
Goals_For_Home=as.numeric(as.character(round_B[,6])),
Goals_Against_Home=as.numeric(as.character(round_B[,7])),
Won_Away=as.numeric(as.character(round_B[,8])),
Draw_Away=as.numeric(as.character(round_B[,9])),
Goals_For_Away=as.numeric(as.character(round_B[,10])),
Goals_Against_Away=as.numeric(as.character(round_B[,11])))
prediction_final_B <- predict(fit_LR, final_B)
prediction_final_B[prediction_final_B<0.5] <- 0
prediction_final_B[prediction_final_B>=0.5] <- 1
final_B[,"Result"] <- as.factor(prediction_final_B)
View(final_B)
View(final_4)
index_B <- NA
for (i in 1:4){
if (final_B$Result[i]==1){
index_B[i]=1
}
else if (final_B$Result[i]==0){
index_B[i]=2
}
}
Semi_Final <- c(as.character(final_B[1,index_2[1]]),
as.character(final_B[2,index_2[2]]),
as.character(final_B[3,index_2[3]]),
as.character(final_B[4,index_2[4]]))
Semi_Final_B
index_B <- NA
for (i in 1:4){
if (final_B$Result[i]==1){
index_B[i]=1
}
else if (final_B$Result[i]==0){
index_B[i]=2
}
}
Semi_Final_B <- c(as.character(final_B[1,index_2[1]]),
as.character(final_B[2,index_2[2]]),
as.character(final_B[3,index_2[3]]),
as.character(final_B[4,index_2[4]]))
Semi_Final_B
Semi_Final_B <- c(as.character(final_B[1,index_B[1]]),
as.character(final_B[2,index_B[2]]),
as.character(final_B[3,index_B[3]]),
as.character(final_B[4,index_B[4]]))
Semi_Final_B
knit2html("worldcup_prediction.Rmd")
knit2html("worldcup_prediction.Rmd")
knit2html("worldcup_prediction.Rmd")
